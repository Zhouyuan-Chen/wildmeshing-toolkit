#pragma once
#include <wmtk/utils/Logger.hpp>
#include "SimplicialComplex.hpp"
#include "TriMesh.hpp"
#include "Tuple.hpp"
namespace wmtk {
namespace {
constexpr PrimitiveType PV = PrimitiveType::Vertex;
constexpr PrimitiveType PE = PrimitiveType::Edge;
constexpr PrimitiveType PF = PrimitiveType::Face;
} // namespace
class TriMesh::TriMeshOperationState
{
public:
    TriMeshOperationState();
    TriMeshOperationState(TriMesh& m);
    TriMeshOperationState(TriMesh& m, const Tuple& operating_tuple);
    void delete_simplices();

    std::array<Accessor<char>, 3> flag_accessors;
    Accessor<long> ff_accessor;
    Accessor<long> fe_accessor;
    Accessor<long> fv_accessor;
    Accessor<long> vf_accessor;
    Accessor<long> ef_accessor;


    //           C
    //         /  \ 
    //    F1  /    \  F2
    //       /      \ 
    //      /        \ 
    //     A----------B
    //      \        /
    //       \      /
    //    F1' \    / F2'
    //         \  /
    //          C'
    // the neighbors are stored in the order of A, B, C, D if they exist
    // vid, ear fid (-1 if it doesn't exit), ear eid
    struct EarGlobalIDs
    {
        long fid = -1; // global fid of the ear, -1 if it doesn't exist
        long eid = -1; // global eid of the ear, -1 if it doesn't exist
    };
    struct PerFaceData
    {
        long V_C_id; // opposing vid
        long deleted_fid = -1; // the face that will be deleted
        std::array<EarGlobalIDs, 2> ears; // ear
    };


    // common simplicies
    std::array<long, 2> end_point_vids; // V_A_id, V_B_id;
    long E_AB_id;

    PerFaceData get_per_face_data(const Tuple& t);
    // simplices required per-face (other than those above)
    std::vector<PerFaceData> FaceDatas;
    void glue_ear_to_face(
        const long ear_fid,
        const long new_face_fid,
        const long old_fid,
        const long eid);

    void merge();
    void split_edge();

    /**
     * @brief
     *
     * @param new_fids_top the two new fids on the top sides of AB generated by split_edge(AB)
     * @param new_fids_bottom the two new fids on the bottom sides of AB generated by split_edge(AB)
     */
    // return the two new fids in order
    std::array<long, 2> glue_new_triangle_topology(
        const long new_vid,
        const std::vector<long>& replacement_eids,
        const PerFaceData& face_data);
    void glue_new_faces_across_AB(
        const std::array<long, 2> new_fids_top,
        const std::array<long, 2> new_fids_bottom);

    std::vector<std::vector<long>> simplices_to_delete; // size 3 for vertex, edge, face
    TriMesh& m_mesh;
    Tuple m_operating_tuple;
};
} // namespace wmtk