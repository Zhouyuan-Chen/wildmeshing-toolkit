#include <igl/readMSH.h>
#include <catch2/catch_test_macros.hpp>
#include <wmtk/SimplicialComplex.hpp>
#include "../tools/DEBUG_TetMesh.hpp"

using namespace wmtk;
constexpr PrimitiveType PV = PrimitiveType::Vertex;
constexpr PrimitiveType PE = PrimitiveType::Edge;
constexpr PrimitiveType PF = PrimitiveType::Face;
constexpr PrimitiveType PT = PrimitiveType::Tetrahedron;

std::vector<std::vector<long>> get_sorted_sc(
    const tests_3d::DEBUG_TetMesh& m,
    const std::vector<Simplex>& sc)
{
    std::vector<std::vector<long>> ret;
    for (auto s : sc) {
        std::vector<long> s_vec;
        Tuple t = s.tuple();
        switch (s.primitive_type()) {
        case PV: s_vec.push_back(m.id(t, PV)); break;
        case PE:
            s_vec.push_back(m.id(t, PV));
            s_vec.push_back(m.id(m.switch_vertex(t), PV));
            break;
        case PF:
            s_vec.push_back(m.id(t, PV));
            s_vec.push_back(m.id(m.switch_vertex(t), PV));
            s_vec.push_back(m.id(m.switch_vertex(m.switch_edge(t)), PV));
            /* code */
            break;
        case PT:
            // TODO: need implement for tet
            s_vec.push_back(m.id(t, PV));
            s_vec.push_back(m.id(m.switch_vertex(t), PV));
            s_vec.push_back(m.id(m.switch_vertex(m.switch_edge(t)), PV));
            s_vec.push_back(m.id(m.switch_vertex(m.switch_edge(m.switch_face(t))), PV));
            /* code */
            break;
        default: break;
        }
        std::sort(s_vec.begin(), s_vec.end());
        ret.push_back(s_vec);
    }
    std::sort(ret.begin(), ret.end(), [](const std::vector<long>& a, const std::vector<long>& b) {
        if (a.size() != b.size()) {
            return a.size() < b.size();
        }
        return a < b;
    });
    return ret;
}

TEST_CASE("link_bunny_tetwild_80", "[simplicial_complex][link][3D]")
{
    Eigen::MatrixXd V;
    Eigen::MatrixXi T;
    Eigen::MatrixXi F;
    Eigen::VectorXi Tritag, Tettag;
    std::string name = "/bunny_tetwild_80.msh";
    std::string path;
    path.append(WMTK_DATA_DIR);
    path.append(name);
    igl::readMSH(path, V, F, T, Tritag, Tettag);
    std::cout << "here1" << std::endl;

    tests_3d::DEBUG_TetMesh m;
    RowVectors4l Tr;
    Tr.resize(T.rows(), T.cols());
    std::cout << T.rows() << " x " << T.cols() << std::endl;
    assert(T.cols() == 4);
    for (long i = 0; i < T.rows(); i++) {
        Tr(i, 0) = T(i, 0);
        Tr(i, 1) = T(i, 1);
        Tr(i, 2) = T(i, 2);
        Tr(i, 3) = T(i, 3);
    }
    m.initialize(Tr);

    std::cout << "here2" << std::endl;

    Tuple t;
    std::vector<std::vector<long>> sc_v, sc_e, sc_f, sc_t;
    t = m.tuple_from_id(PV, 807);
    sc_v = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 39);
    CHECK(sc_v[0][0] == 706);
    CHECK(sc_v[1][0] == 749);
    CHECK(sc_v[2][0] == 791);
    CHECK(sc_v[3][0] == 839);
    CHECK(sc_v[4][0] == 953);
    CHECK(sc_v[5][0] == 975);
    CHECK(sc_v[6][0] == 983);
    CHECK(sc_v[7][0] == 1028);
    CHECK(sc_v[8][0] == 7790);
    CHECK(sc_v[9][0] == 7887);
    CHECK(sc_v[10][0] == 706);
    CHECK(sc_v[10][1] == 749);
    CHECK(sc_v[11][0] == 706);
    CHECK(sc_v[11][1] == 791);
    CHECK(sc_v[12][0] == 706);
    CHECK(sc_v[12][1] == 7887);
    CHECK(sc_v[13][0] == 749);
    CHECK(sc_v[13][1] == 839);
    CHECK(sc_v[14][0] == 749);
    CHECK(sc_v[14][1] == 7887);
    CHECK(sc_v[15][0] == 791);
    CHECK(sc_v[15][1] == 953);
    CHECK(sc_v[16][0] == 791);
    CHECK(sc_v[16][1] == 7887);
    CHECK(sc_v[17][0] == 839);
    CHECK(sc_v[17][1] == 975);
    CHECK(sc_v[18][0] == 839);
    CHECK(sc_v[18][1] == 7790);
    CHECK(sc_v[19][0] == 839);
    CHECK(sc_v[19][1] == 7887);
    CHECK(sc_v[20][0] == 953);
    CHECK(sc_v[20][1] == 983);
    CHECK(sc_v[21][0] == 953);
    CHECK(sc_v[21][1] == 7790);
    CHECK(sc_v[22][0] == 953);
    CHECK(sc_v[22][1] == 7887);
    CHECK(sc_v[23][0] == 975);
    CHECK(sc_v[23][1] == 1028);
    CHECK(sc_v[24][0] == 975);
    CHECK(sc_v[24][1] == 7790);
    CHECK(sc_v[25][0] == 983);
    CHECK(sc_v[25][1] == 1028);
    CHECK(sc_v[26][0] == 983);
    CHECK(sc_v[26][1] == 7790);
    CHECK(sc_v[27][0] == 1028);
    CHECK(sc_v[27][1] == 7790);
    CHECK(sc_v[28][0] == 7790);
    CHECK(sc_v[28][1] == 7887);
    CHECK(sc_v[29][0] == 706);
    CHECK(sc_v[29][1] == 749);
    CHECK(sc_v[29][2] == 7887);
    CHECK(sc_v[30][0] == 706);
    CHECK(sc_v[30][1] == 791);
    CHECK(sc_v[30][2] == 7887);
    CHECK(sc_v[31][0] == 749);
    CHECK(sc_v[31][1] == 839);
    CHECK(sc_v[31][2] == 7887);
    CHECK(sc_v[32][0] == 791);
    CHECK(sc_v[32][1] == 953);
    CHECK(sc_v[32][2] == 7887);
    CHECK(sc_v[33][0] == 839);
    CHECK(sc_v[33][1] == 975);
    CHECK(sc_v[33][2] == 7790);
    CHECK(sc_v[34][0] == 839);
    CHECK(sc_v[34][1] == 7790);
    CHECK(sc_v[34][2] == 7887);
    CHECK(sc_v[35][0] == 953);
    CHECK(sc_v[35][1] == 983);
    CHECK(sc_v[35][2] == 7790);
    CHECK(sc_v[36][0] == 953);
    CHECK(sc_v[36][1] == 7790);
    CHECK(sc_v[36][2] == 7887);
    CHECK(sc_v[37][0] == 975);
    CHECK(sc_v[37][1] == 1028);
    CHECK(sc_v[37][2] == 7790);
    CHECK(sc_v[38][0] == 983);
    CHECK(sc_v[38][1] == 1028);
    CHECK(sc_v[38][2] == 7790);

    t = m.tuple_from_id(PV, 4690);
    sc_v = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 39);
    CHECK(sc_v[0][0] == 4342);
    CHECK(sc_v[1][0] == 4424);
    CHECK(sc_v[2][0] == 4528);
    CHECK(sc_v[3][0] == 4592);
    CHECK(sc_v[4][0] == 4709);
    CHECK(sc_v[5][0] == 4803);
    CHECK(sc_v[6][0] == 4804);
    CHECK(sc_v[7][0] == 4932);
    CHECK(sc_v[8][0] == 7581);
    CHECK(sc_v[9][0] == 7762);
    CHECK(sc_v[10][0] == 4342);
    CHECK(sc_v[10][1] == 4424);
    CHECK(sc_v[11][0] == 4342);
    CHECK(sc_v[11][1] == 4528);
    CHECK(sc_v[12][0] == 4342);
    CHECK(sc_v[12][1] == 7762);
    CHECK(sc_v[13][0] == 4424);
    CHECK(sc_v[13][1] == 4592);
    CHECK(sc_v[14][0] == 4424);
    CHECK(sc_v[14][1] == 7581);
    CHECK(sc_v[15][0] == 4424);
    CHECK(sc_v[15][1] == 7762);
    CHECK(sc_v[16][0] == 4528);
    CHECK(sc_v[16][1] == 4709);
    CHECK(sc_v[17][0] == 4528);
    CHECK(sc_v[17][1] == 7581);
    CHECK(sc_v[18][0] == 4528);
    CHECK(sc_v[18][1] == 7762);
    CHECK(sc_v[19][0] == 4592);
    CHECK(sc_v[19][1] == 4803);
    CHECK(sc_v[20][0] == 4592);
    CHECK(sc_v[20][1] == 7581);
    CHECK(sc_v[21][0] == 4709);
    CHECK(sc_v[21][1] == 4804);
    CHECK(sc_v[22][0] == 4709);
    CHECK(sc_v[22][1] == 7581);
    CHECK(sc_v[23][0] == 4803);
    CHECK(sc_v[23][1] == 4932);
    CHECK(sc_v[24][0] == 4803);
    CHECK(sc_v[24][1] == 7581);
    CHECK(sc_v[25][0] == 4804);
    CHECK(sc_v[25][1] == 4932);
    CHECK(sc_v[26][0] == 4804);
    CHECK(sc_v[26][1] == 7581);
    CHECK(sc_v[27][0] == 4932);
    CHECK(sc_v[27][1] == 7581);
    CHECK(sc_v[28][0] == 7581);
    CHECK(sc_v[28][1] == 7762);
    CHECK(sc_v[29][0] == 4342);
    CHECK(sc_v[29][1] == 4424);
    CHECK(sc_v[29][2] == 7762);
    CHECK(sc_v[30][0] == 4342);
    CHECK(sc_v[30][1] == 4528);
    CHECK(sc_v[30][2] == 7762);
    CHECK(sc_v[31][0] == 4424);
    CHECK(sc_v[31][1] == 4592);
    CHECK(sc_v[31][2] == 7581);
    CHECK(sc_v[32][0] == 4424);
    CHECK(sc_v[32][1] == 7581);
    CHECK(sc_v[32][2] == 7762);
    CHECK(sc_v[33][0] == 4528);
    CHECK(sc_v[33][1] == 4709);
    CHECK(sc_v[33][2] == 7581);
    CHECK(sc_v[34][0] == 4528);
    CHECK(sc_v[34][1] == 7581);
    CHECK(sc_v[34][2] == 7762);
    CHECK(sc_v[35][0] == 4592);
    CHECK(sc_v[35][1] == 4803);
    CHECK(sc_v[35][2] == 7581);
    CHECK(sc_v[36][0] == 4709);
    CHECK(sc_v[36][1] == 4804);
    CHECK(sc_v[36][2] == 7581);
    CHECK(sc_v[37][0] == 4803);
    CHECK(sc_v[37][1] == 4932);
    CHECK(sc_v[37][2] == 7581);
    CHECK(sc_v[38][0] == 4804);
    CHECK(sc_v[38][1] == 4932);
    CHECK(sc_v[38][2] == 7581);

    t = m.tuple_from_id(PV, 2050);
    sc_v = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 27);
    CHECK(sc_v[0][0] == 1943);
    CHECK(sc_v[1][0] == 2011);
    CHECK(sc_v[2][0] == 2065);
    CHECK(sc_v[3][0] == 2082);
    CHECK(sc_v[4][0] == 2099);
    CHECK(sc_v[5][0] == 2112);
    CHECK(sc_v[6][0] == 7344);
    CHECK(sc_v[7][0] == 1943);
    CHECK(sc_v[7][1] == 2011);
    CHECK(sc_v[8][0] == 1943);
    CHECK(sc_v[8][1] == 2065);
    CHECK(sc_v[9][0] == 1943);
    CHECK(sc_v[9][1] == 2082);
    CHECK(sc_v[10][0] == 1943);
    CHECK(sc_v[10][1] == 2112);
    CHECK(sc_v[11][0] == 2011);
    CHECK(sc_v[11][1] == 2065);
    CHECK(sc_v[12][0] == 2065);
    CHECK(sc_v[12][1] == 2099);
    CHECK(sc_v[13][0] == 2065);
    CHECK(sc_v[13][1] == 2112);
    CHECK(sc_v[14][0] == 2065);
    CHECK(sc_v[14][1] == 7344);
    CHECK(sc_v[15][0] == 2082);
    CHECK(sc_v[15][1] == 2099);
    CHECK(sc_v[16][0] == 2082);
    CHECK(sc_v[16][1] == 2112);
    CHECK(sc_v[17][0] == 2082);
    CHECK(sc_v[17][1] == 7344);
    CHECK(sc_v[18][0] == 2099);
    CHECK(sc_v[18][1] == 7344);
    CHECK(sc_v[19][0] == 2112);
    CHECK(sc_v[19][1] == 7344);
    CHECK(sc_v[20][0] == 1943);
    CHECK(sc_v[20][1] == 2011);
    CHECK(sc_v[20][2] == 2065);
    CHECK(sc_v[21][0] == 1943);
    CHECK(sc_v[21][1] == 2065);
    CHECK(sc_v[21][2] == 2112);
    CHECK(sc_v[22][0] == 1943);
    CHECK(sc_v[22][1] == 2082);
    CHECK(sc_v[22][2] == 2112);
    CHECK(sc_v[23][0] == 2065);
    CHECK(sc_v[23][1] == 2099);
    CHECK(sc_v[23][2] == 7344);
    CHECK(sc_v[24][0] == 2065);
    CHECK(sc_v[24][1] == 2112);
    CHECK(sc_v[24][2] == 7344);
    CHECK(sc_v[25][0] == 2082);
    CHECK(sc_v[25][1] == 2099);
    CHECK(sc_v[25][2] == 7344);
    CHECK(sc_v[26][0] == 2082);
    CHECK(sc_v[26][1] == 2112);
    CHECK(sc_v[26][2] == 7344);

    t = m.edge_tuple_from_vids(2950, 2989);
    sc_e = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 7);
    CHECK(sc_e[0][0] == 2946);
    CHECK(sc_e[1][0] == 2978);
    CHECK(sc_e[2][0] == 2985);
    CHECK(sc_e[3][0] == 3084);
    CHECK(sc_e[4][0] == 2946);
    CHECK(sc_e[4][1] == 2985);
    CHECK(sc_e[5][0] == 2978);
    CHECK(sc_e[5][1] == 3084);
    CHECK(sc_e[6][0] == 2985);
    CHECK(sc_e[6][1] == 3084);

    t = m.edge_tuple_from_vids(7631, 7940);
    sc_e = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 10);
    CHECK(sc_e[0][0] == 4379);
    CHECK(sc_e[1][0] == 7360);
    CHECK(sc_e[2][0] == 7361);
    CHECK(sc_e[3][0] == 7550);
    CHECK(sc_e[4][0] == 7760);
    CHECK(sc_e[5][0] == 4379);
    CHECK(sc_e[5][1] == 7360);
    CHECK(sc_e[6][0] == 4379);
    CHECK(sc_e[6][1] == 7361);
    CHECK(sc_e[7][0] == 7360);
    CHECK(sc_e[7][1] == 7550);
    CHECK(sc_e[8][0] == 7361);
    CHECK(sc_e[8][1] == 7760);
    CHECK(sc_e[9][0] == 7550);
    CHECK(sc_e[9][1] == 7760);

    t = m.edge_tuple_from_vids(4400, 4434);
    sc_e = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 9);
    CHECK(sc_e[0][0] == 4282);
    CHECK(sc_e[1][0] == 4329);
    CHECK(sc_e[2][0] == 4345);
    CHECK(sc_e[3][0] == 4403);
    CHECK(sc_e[4][0] == 4467);
    CHECK(sc_e[5][0] == 4282);
    CHECK(sc_e[5][1] == 4329);
    CHECK(sc_e[6][0] == 4282);
    CHECK(sc_e[6][1] == 4345);
    CHECK(sc_e[7][0] == 4329);
    CHECK(sc_e[7][1] == 4403);
    CHECK(sc_e[8][0] == 4345);
    CHECK(sc_e[8][1] == 4467);

    t = m.face_tuple_from_vids(2697, 2813, 2891);
    sc_f = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 1);
    CHECK(sc_f[0][0] == 3288);

    t = m.face_tuple_from_vids(3752, 6123, 7417);
    sc_f = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 2);
    CHECK(sc_f[0][0] == 1742);
    CHECK(sc_f[1][0] == 7483);

    t = m.face_tuple_from_vids(3786, 3788, 7367);
    sc_f = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 2);
    CHECK(sc_f[0][0] == 3665);
    CHECK(sc_f[1][0] == 3850);

    t = m.tet_tuple_from_vids(5331, 5367, 5418, 5480);
    sc_t = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 0);

    t = m.tet_tuple_from_vids(4834, 4894, 4959, 7523);
    sc_t = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 0);

    t = m.tet_tuple_from_vids(3389, 3491, 3583, 3636);
    sc_t = get_sorted_sc(m, SimplicialComplex::link(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 0);
}

TEST_CASE("open_star_bunny_tetwild_80", "[simplicial_complex][open_star][3D]")
{
    Eigen::MatrixXd V;
    Eigen::MatrixXi T;
    Eigen::MatrixXi F;
    Eigen::VectorXi Tritag, Tettag;
    std::string name = "/bunny_tetwild_80.msh";
    std::string path;
    path.append(WMTK_DATA_DIR);
    path.append(name);
    igl::readMSH(path, V, F, T, Tritag, Tettag);
    tests_3d::DEBUG_TetMesh m;
    RowVectors4l Tr;
    Tr.resize(T.rows(), T.cols());
    assert(T.cols() == 4);
    for (long i = 0; i < T.rows(); i++) {
        Tr(i, 0) = T(i, 0);
        Tr(i, 1) = T(i, 1);
        Tr(i, 2) = T(i, 2);
        Tr(i, 3) = T(i, 3);
    }
    m.initialize(Tr);

    Tuple t;
    std::vector<std::vector<long>> sc_v, sc_e, sc_f, sc_t;
    t = m.tuple_from_id(PV, 7295);
    sc_v = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 30);
    CHECK(sc_v[0][0] == 7295);
    CHECK(sc_v[1][0] == 7270);
    CHECK(sc_v[1][1] == 7295);
    CHECK(sc_v[2][0] == 7272);
    CHECK(sc_v[2][1] == 7295);
    CHECK(sc_v[3][0] == 7277);
    CHECK(sc_v[3][1] == 7295);
    CHECK(sc_v[4][0] == 7285);
    CHECK(sc_v[4][1] == 7295);
    CHECK(sc_v[5][0] == 7295);
    CHECK(sc_v[5][1] == 7304);
    CHECK(sc_v[6][0] == 7295);
    CHECK(sc_v[6][1] == 7313);
    CHECK(sc_v[7][0] == 7295);
    CHECK(sc_v[7][1] == 7316);
    CHECK(sc_v[8][0] == 7295);
    CHECK(sc_v[8][1] == 7432);
    CHECK(sc_v[9][0] == 7270);
    CHECK(sc_v[9][1] == 7277);
    CHECK(sc_v[9][2] == 7295);
    CHECK(sc_v[10][0] == 7270);
    CHECK(sc_v[10][1] == 7285);
    CHECK(sc_v[10][2] == 7295);
    CHECK(sc_v[11][0] == 7270);
    CHECK(sc_v[11][1] == 7295);
    CHECK(sc_v[11][2] == 7432);
    CHECK(sc_v[12][0] == 7272);
    CHECK(sc_v[12][1] == 7277);
    CHECK(sc_v[12][2] == 7295);
    CHECK(sc_v[13][0] == 7272);
    CHECK(sc_v[13][1] == 7295);
    CHECK(sc_v[13][2] == 7304);
    CHECK(sc_v[14][0] == 7272);
    CHECK(sc_v[14][1] == 7295);
    CHECK(sc_v[14][2] == 7432);
    CHECK(sc_v[15][0] == 7277);
    CHECK(sc_v[15][1] == 7295);
    CHECK(sc_v[15][2] == 7432);
    CHECK(sc_v[16][0] == 7285);
    CHECK(sc_v[16][1] == 7295);
    CHECK(sc_v[16][2] == 7313);
    CHECK(sc_v[17][0] == 7285);
    CHECK(sc_v[17][1] == 7295);
    CHECK(sc_v[17][2] == 7432);
    CHECK(sc_v[18][0] == 7295);
    CHECK(sc_v[18][1] == 7304);
    CHECK(sc_v[18][2] == 7316);
    CHECK(sc_v[19][0] == 7295);
    CHECK(sc_v[19][1] == 7304);
    CHECK(sc_v[19][2] == 7432);
    CHECK(sc_v[20][0] == 7295);
    CHECK(sc_v[20][1] == 7313);
    CHECK(sc_v[20][2] == 7316);
    CHECK(sc_v[21][0] == 7295);
    CHECK(sc_v[21][1] == 7313);
    CHECK(sc_v[21][2] == 7432);
    CHECK(sc_v[22][0] == 7295);
    CHECK(sc_v[22][1] == 7316);
    CHECK(sc_v[22][2] == 7432);
    CHECK(sc_v[23][0] == 7270);
    CHECK(sc_v[23][1] == 7277);
    CHECK(sc_v[23][2] == 7295);
    CHECK(sc_v[23][3] == 7432);
    CHECK(sc_v[24][0] == 7270);
    CHECK(sc_v[24][1] == 7285);
    CHECK(sc_v[24][2] == 7295);
    CHECK(sc_v[24][3] == 7432);
    CHECK(sc_v[25][0] == 7272);
    CHECK(sc_v[25][1] == 7277);
    CHECK(sc_v[25][2] == 7295);
    CHECK(sc_v[25][3] == 7432);
    CHECK(sc_v[26][0] == 7272);
    CHECK(sc_v[26][1] == 7295);
    CHECK(sc_v[26][2] == 7304);
    CHECK(sc_v[26][3] == 7432);
    CHECK(sc_v[27][0] == 7285);
    CHECK(sc_v[27][1] == 7295);
    CHECK(sc_v[27][2] == 7313);
    CHECK(sc_v[27][3] == 7432);
    CHECK(sc_v[28][0] == 7295);
    CHECK(sc_v[28][1] == 7304);
    CHECK(sc_v[28][2] == 7316);
    CHECK(sc_v[28][3] == 7432);
    CHECK(sc_v[29][0] == 7295);
    CHECK(sc_v[29][1] == 7313);
    CHECK(sc_v[29][2] == 7316);
    CHECK(sc_v[29][3] == 7432);

    t = m.tuple_from_id(PV, 6844);
    sc_v = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 54);
    CHECK(sc_v[0][0] == 6844);
    CHECK(sc_v[1][0] == 2267);
    CHECK(sc_v[1][1] == 6844);
    CHECK(sc_v[2][0] == 6779);
    CHECK(sc_v[2][1] == 6844);
    CHECK(sc_v[3][0] == 6798);
    CHECK(sc_v[3][1] == 6844);
    CHECK(sc_v[4][0] == 6838);
    CHECK(sc_v[4][1] == 6844);
    CHECK(sc_v[5][0] == 6841);
    CHECK(sc_v[5][1] == 6844);
    CHECK(sc_v[6][0] == 6844);
    CHECK(sc_v[6][1] == 6871);
    CHECK(sc_v[7][0] == 6844);
    CHECK(sc_v[7][1] == 6893);
    CHECK(sc_v[8][0] == 6844);
    CHECK(sc_v[8][1] == 6897);
    CHECK(sc_v[9][0] == 6844);
    CHECK(sc_v[9][1] == 7426);
    CHECK(sc_v[10][0] == 6844);
    CHECK(sc_v[10][1] == 7524);
    CHECK(sc_v[11][0] == 6844);
    CHECK(sc_v[11][1] == 7791);
    CHECK(sc_v[12][0] == 6844);
    CHECK(sc_v[12][1] == 7845);
    CHECK(sc_v[13][0] == 2267);
    CHECK(sc_v[13][1] == 6844);
    CHECK(sc_v[13][2] == 6871);
    CHECK(sc_v[14][0] == 2267);
    CHECK(sc_v[14][1] == 6844);
    CHECK(sc_v[14][2] == 6893);
    CHECK(sc_v[15][0] == 2267);
    CHECK(sc_v[15][1] == 6844);
    CHECK(sc_v[15][2] == 7426);
    CHECK(sc_v[16][0] == 2267);
    CHECK(sc_v[16][1] == 6844);
    CHECK(sc_v[16][2] == 7524);
    CHECK(sc_v[17][0] == 6779);
    CHECK(sc_v[17][1] == 6798);
    CHECK(sc_v[17][2] == 6844);
    CHECK(sc_v[18][0] == 6779);
    CHECK(sc_v[18][1] == 6841);
    CHECK(sc_v[18][2] == 6844);
    CHECK(sc_v[19][0] == 6779);
    CHECK(sc_v[19][1] == 6844);
    CHECK(sc_v[19][2] == 7524);
    CHECK(sc_v[20][0] == 6779);
    CHECK(sc_v[20][1] == 6844);
    CHECK(sc_v[20][2] == 7791);
    CHECK(sc_v[21][0] == 6798);
    CHECK(sc_v[21][1] == 6838);
    CHECK(sc_v[21][2] == 6844);
    CHECK(sc_v[22][0] == 6798);
    CHECK(sc_v[22][1] == 6844);
    CHECK(sc_v[22][2] == 7524);
    CHECK(sc_v[23][0] == 6838);
    CHECK(sc_v[23][1] == 6844);
    CHECK(sc_v[23][2] == 6871);
    CHECK(sc_v[24][0] == 6838);
    CHECK(sc_v[24][1] == 6844);
    CHECK(sc_v[24][2] == 7524);
    CHECK(sc_v[25][0] == 6841);
    CHECK(sc_v[25][1] == 6844);
    CHECK(sc_v[25][2] == 6897);
    CHECK(sc_v[26][0] == 6841);
    CHECK(sc_v[26][1] == 6844);
    CHECK(sc_v[26][2] == 7791);
    CHECK(sc_v[27][0] == 6844);
    CHECK(sc_v[27][1] == 6871);
    CHECK(sc_v[27][2] == 6893);
    CHECK(sc_v[28][0] == 6844);
    CHECK(sc_v[28][1] == 6871);
    CHECK(sc_v[28][2] == 7524);
    CHECK(sc_v[29][0] == 6844);
    CHECK(sc_v[29][1] == 6893);
    CHECK(sc_v[29][2] == 6897);
    CHECK(sc_v[30][0] == 6844);
    CHECK(sc_v[30][1] == 6893);
    CHECK(sc_v[30][2] == 7426);
    CHECK(sc_v[31][0] == 6844);
    CHECK(sc_v[31][1] == 6893);
    CHECK(sc_v[31][2] == 7845);
    CHECK(sc_v[32][0] == 6844);
    CHECK(sc_v[32][1] == 6897);
    CHECK(sc_v[32][2] == 7791);
    CHECK(sc_v[33][0] == 6844);
    CHECK(sc_v[33][1] == 6897);
    CHECK(sc_v[33][2] == 7845);
    CHECK(sc_v[34][0] == 6844);
    CHECK(sc_v[34][1] == 7426);
    CHECK(sc_v[34][2] == 7524);
    CHECK(sc_v[35][0] == 6844);
    CHECK(sc_v[35][1] == 7426);
    CHECK(sc_v[35][2] == 7791);
    CHECK(sc_v[36][0] == 6844);
    CHECK(sc_v[36][1] == 7426);
    CHECK(sc_v[36][2] == 7845);
    CHECK(sc_v[37][0] == 6844);
    CHECK(sc_v[37][1] == 7524);
    CHECK(sc_v[37][2] == 7791);
    CHECK(sc_v[38][0] == 6844);
    CHECK(sc_v[38][1] == 7791);
    CHECK(sc_v[38][2] == 7845);
    CHECK(sc_v[39][0] == 2267);
    CHECK(sc_v[39][1] == 6844);
    CHECK(sc_v[39][2] == 6871);
    CHECK(sc_v[39][3] == 6893);
    CHECK(sc_v[40][0] == 2267);
    CHECK(sc_v[40][1] == 6844);
    CHECK(sc_v[40][2] == 6871);
    CHECK(sc_v[40][3] == 7524);
    CHECK(sc_v[41][0] == 2267);
    CHECK(sc_v[41][1] == 6844);
    CHECK(sc_v[41][2] == 6893);
    CHECK(sc_v[41][3] == 7426);
    CHECK(sc_v[42][0] == 2267);
    CHECK(sc_v[42][1] == 6844);
    CHECK(sc_v[42][2] == 7426);
    CHECK(sc_v[42][3] == 7524);
    CHECK(sc_v[43][0] == 6779);
    CHECK(sc_v[43][1] == 6798);
    CHECK(sc_v[43][2] == 6844);
    CHECK(sc_v[43][3] == 7524);
    CHECK(sc_v[44][0] == 6779);
    CHECK(sc_v[44][1] == 6841);
    CHECK(sc_v[44][2] == 6844);
    CHECK(sc_v[44][3] == 7791);
    CHECK(sc_v[45][0] == 6779);
    CHECK(sc_v[45][1] == 6844);
    CHECK(sc_v[45][2] == 7524);
    CHECK(sc_v[45][3] == 7791);
    CHECK(sc_v[46][0] == 6798);
    CHECK(sc_v[46][1] == 6838);
    CHECK(sc_v[46][2] == 6844);
    CHECK(sc_v[46][3] == 7524);
    CHECK(sc_v[47][0] == 6838);
    CHECK(sc_v[47][1] == 6844);
    CHECK(sc_v[47][2] == 6871);
    CHECK(sc_v[47][3] == 7524);
    CHECK(sc_v[48][0] == 6841);
    CHECK(sc_v[48][1] == 6844);
    CHECK(sc_v[48][2] == 6897);
    CHECK(sc_v[48][3] == 7791);
    CHECK(sc_v[49][0] == 6844);
    CHECK(sc_v[49][1] == 6893);
    CHECK(sc_v[49][2] == 6897);
    CHECK(sc_v[49][3] == 7845);
    CHECK(sc_v[50][0] == 6844);
    CHECK(sc_v[50][1] == 6893);
    CHECK(sc_v[50][2] == 7426);
    CHECK(sc_v[50][3] == 7845);
    CHECK(sc_v[51][0] == 6844);
    CHECK(sc_v[51][1] == 6897);
    CHECK(sc_v[51][2] == 7791);
    CHECK(sc_v[51][3] == 7845);
    CHECK(sc_v[52][0] == 6844);
    CHECK(sc_v[52][1] == 7426);
    CHECK(sc_v[52][2] == 7524);
    CHECK(sc_v[52][3] == 7791);
    CHECK(sc_v[53][0] == 6844);
    CHECK(sc_v[53][1] == 7426);
    CHECK(sc_v[53][2] == 7791);
    CHECK(sc_v[53][3] == 7845);

    t = m.tuple_from_id(PV, 2473);
    sc_v = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 26);
    CHECK(sc_v[0][0] == 2473);
    CHECK(sc_v[1][0] == 2172);
    CHECK(sc_v[1][1] == 2473);
    CHECK(sc_v[2][0] == 2310);
    CHECK(sc_v[2][1] == 2473);
    CHECK(sc_v[3][0] == 2470);
    CHECK(sc_v[3][1] == 2473);
    CHECK(sc_v[4][0] == 2473);
    CHECK(sc_v[4][1] == 2577);
    CHECK(sc_v[5][0] == 2473);
    CHECK(sc_v[5][1] == 2605);
    CHECK(sc_v[6][0] == 2473);
    CHECK(sc_v[6][1] == 2633);
    CHECK(sc_v[7][0] == 2473);
    CHECK(sc_v[7][1] == 7347);
    CHECK(sc_v[8][0] == 2172);
    CHECK(sc_v[8][1] == 2310);
    CHECK(sc_v[8][2] == 2473);
    CHECK(sc_v[9][0] == 2172);
    CHECK(sc_v[9][1] == 2473);
    CHECK(sc_v[9][2] == 2633);
    CHECK(sc_v[10][0] == 2172);
    CHECK(sc_v[10][1] == 2473);
    CHECK(sc_v[10][2] == 7347);
    CHECK(sc_v[11][0] == 2310);
    CHECK(sc_v[11][1] == 2470);
    CHECK(sc_v[11][2] == 2473);
    CHECK(sc_v[12][0] == 2310);
    CHECK(sc_v[12][1] == 2473);
    CHECK(sc_v[12][2] == 7347);
    CHECK(sc_v[13][0] == 2470);
    CHECK(sc_v[13][1] == 2473);
    CHECK(sc_v[13][2] == 2577);
    CHECK(sc_v[14][0] == 2470);
    CHECK(sc_v[14][1] == 2473);
    CHECK(sc_v[14][2] == 2605);
    CHECK(sc_v[15][0] == 2470);
    CHECK(sc_v[15][1] == 2473);
    CHECK(sc_v[15][2] == 7347);
    CHECK(sc_v[16][0] == 2473);
    CHECK(sc_v[16][1] == 2577);
    CHECK(sc_v[16][2] == 2605);
    CHECK(sc_v[17][0] == 2473);
    CHECK(sc_v[17][1] == 2577);
    CHECK(sc_v[17][2] == 2633);
    CHECK(sc_v[18][0] == 2473);
    CHECK(sc_v[18][1] == 2577);
    CHECK(sc_v[18][2] == 7347);
    CHECK(sc_v[19][0] == 2473);
    CHECK(sc_v[19][1] == 2633);
    CHECK(sc_v[19][2] == 7347);
    CHECK(sc_v[20][0] == 2172);
    CHECK(sc_v[20][1] == 2310);
    CHECK(sc_v[20][2] == 2473);
    CHECK(sc_v[20][3] == 7347);
    CHECK(sc_v[21][0] == 2172);
    CHECK(sc_v[21][1] == 2473);
    CHECK(sc_v[21][2] == 2633);
    CHECK(sc_v[21][3] == 7347);
    CHECK(sc_v[22][0] == 2310);
    CHECK(sc_v[22][1] == 2470);
    CHECK(sc_v[22][2] == 2473);
    CHECK(sc_v[22][3] == 7347);
    CHECK(sc_v[23][0] == 2470);
    CHECK(sc_v[23][1] == 2473);
    CHECK(sc_v[23][2] == 2577);
    CHECK(sc_v[23][3] == 2605);
    CHECK(sc_v[24][0] == 2470);
    CHECK(sc_v[24][1] == 2473);
    CHECK(sc_v[24][2] == 2577);
    CHECK(sc_v[24][3] == 7347);
    CHECK(sc_v[25][0] == 2473);
    CHECK(sc_v[25][1] == 2577);
    CHECK(sc_v[25][2] == 2633);
    CHECK(sc_v[25][3] == 7347);

    t = m.edge_tuple_from_vids(4753, 4819);
    sc_e = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 6);
    CHECK(sc_e[0][0] == 4753);
    CHECK(sc_e[0][1] == 4819);
    CHECK(sc_e[1][0] == 4704);
    CHECK(sc_e[1][1] == 4753);
    CHECK(sc_e[1][2] == 4819);
    CHECK(sc_e[2][0] == 4753);
    CHECK(sc_e[2][1] == 4819);
    CHECK(sc_e[2][2] == 4871);
    CHECK(sc_e[3][0] == 4753);
    CHECK(sc_e[3][1] == 4819);
    CHECK(sc_e[3][2] == 7385);
    CHECK(sc_e[4][0] == 4704);
    CHECK(sc_e[4][1] == 4753);
    CHECK(sc_e[4][2] == 4819);
    CHECK(sc_e[4][3] == 7385);
    CHECK(sc_e[5][0] == 4753);
    CHECK(sc_e[5][1] == 4819);
    CHECK(sc_e[5][2] == 4871);
    CHECK(sc_e[5][3] == 7385);

    t = m.edge_tuple_from_vids(6925, 7845);
    sc_e = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 11);
    CHECK(sc_e[0][0] == 6925);
    CHECK(sc_e[0][1] == 7845);
    CHECK(sc_e[1][0] == 6893);
    CHECK(sc_e[1][1] == 6925);
    CHECK(sc_e[1][2] == 7845);
    CHECK(sc_e[2][0] == 6925);
    CHECK(sc_e[2][1] == 6961);
    CHECK(sc_e[2][2] == 7845);
    CHECK(sc_e[3][0] == 6925);
    CHECK(sc_e[3][1] == 6979);
    CHECK(sc_e[3][2] == 7845);
    CHECK(sc_e[4][0] == 6925);
    CHECK(sc_e[4][1] == 6994);
    CHECK(sc_e[4][2] == 7845);
    CHECK(sc_e[5][0] == 6925);
    CHECK(sc_e[5][1] == 7426);
    CHECK(sc_e[5][2] == 7845);
    CHECK(sc_e[6][0] == 6893);
    CHECK(sc_e[6][1] == 6925);
    CHECK(sc_e[6][2] == 6994);
    CHECK(sc_e[6][3] == 7845);
    CHECK(sc_e[7][0] == 6893);
    CHECK(sc_e[7][1] == 6925);
    CHECK(sc_e[7][2] == 7426);
    CHECK(sc_e[7][3] == 7845);
    CHECK(sc_e[8][0] == 6925);
    CHECK(sc_e[8][1] == 6961);
    CHECK(sc_e[8][2] == 6979);
    CHECK(sc_e[8][3] == 7845);
    CHECK(sc_e[9][0] == 6925);
    CHECK(sc_e[9][1] == 6961);
    CHECK(sc_e[9][2] == 7426);
    CHECK(sc_e[9][3] == 7845);
    CHECK(sc_e[10][0] == 6925);
    CHECK(sc_e[10][1] == 6979);
    CHECK(sc_e[10][2] == 6994);
    CHECK(sc_e[10][3] == 7845);

    t = m.edge_tuple_from_vids(2310, 7347);
    sc_e = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 11);
    CHECK(sc_e[0][0] == 2310);
    CHECK(sc_e[0][1] == 7347);
    CHECK(sc_e[1][0] == 1780);
    CHECK(sc_e[1][1] == 2310);
    CHECK(sc_e[1][2] == 7347);
    CHECK(sc_e[2][0] == 2172);
    CHECK(sc_e[2][1] == 2310);
    CHECK(sc_e[2][2] == 7347);
    CHECK(sc_e[3][0] == 2310);
    CHECK(sc_e[3][1] == 2470);
    CHECK(sc_e[3][2] == 7347);
    CHECK(sc_e[4][0] == 2310);
    CHECK(sc_e[4][1] == 2473);
    CHECK(sc_e[4][2] == 7347);
    CHECK(sc_e[5][0] == 2310);
    CHECK(sc_e[5][1] == 7347);
    CHECK(sc_e[5][2] == 7880);
    CHECK(sc_e[6][0] == 1780);
    CHECK(sc_e[6][1] == 2172);
    CHECK(sc_e[6][2] == 2310);
    CHECK(sc_e[6][3] == 7347);
    CHECK(sc_e[7][0] == 1780);
    CHECK(sc_e[7][1] == 2310);
    CHECK(sc_e[7][2] == 7347);
    CHECK(sc_e[7][3] == 7880);
    CHECK(sc_e[8][0] == 2172);
    CHECK(sc_e[8][1] == 2310);
    CHECK(sc_e[8][2] == 2473);
    CHECK(sc_e[8][3] == 7347);
    CHECK(sc_e[9][0] == 2310);
    CHECK(sc_e[9][1] == 2470);
    CHECK(sc_e[9][2] == 2473);
    CHECK(sc_e[9][3] == 7347);
    CHECK(sc_e[10][0] == 2310);
    CHECK(sc_e[10][1] == 2470);
    CHECK(sc_e[10][2] == 7347);
    CHECK(sc_e[10][3] == 7880);

    t = m.face_tuple_from_vids(2497, 2648, 7354);
    sc_f = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 3);
    CHECK(sc_f[0][0] == 2497);
    CHECK(sc_f[0][1] == 2648);
    CHECK(sc_f[0][2] == 7354);
    CHECK(sc_f[1][0] == 2497);
    CHECK(sc_f[1][1] == 2563);
    CHECK(sc_f[1][2] == 2648);
    CHECK(sc_f[1][3] == 7354);
    CHECK(sc_f[2][0] == 2497);
    CHECK(sc_f[2][1] == 2579);
    CHECK(sc_f[2][2] == 2648);
    CHECK(sc_f[2][3] == 7354);

    t = m.face_tuple_from_vids(4908, 5048, 7943);
    sc_f = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 3);
    CHECK(sc_f[0][0] == 4908);
    CHECK(sc_f[0][1] == 5048);
    CHECK(sc_f[0][2] == 7943);
    CHECK(sc_f[1][0] == 4908);
    CHECK(sc_f[1][1] == 5048);
    CHECK(sc_f[1][2] == 5077);
    CHECK(sc_f[1][3] == 7943);
    CHECK(sc_f[2][0] == 4908);
    CHECK(sc_f[2][1] == 5048);
    CHECK(sc_f[2][2] == 5180);
    CHECK(sc_f[2][3] == 7943);

    t = m.face_tuple_from_vids(5400, 5721, 7706);
    sc_f = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 3);
    CHECK(sc_f[0][0] == 5400);
    CHECK(sc_f[0][1] == 5721);
    CHECK(sc_f[0][2] == 7706);
    CHECK(sc_f[1][0] == 5400);
    CHECK(sc_f[1][1] == 5506);
    CHECK(sc_f[1][2] == 5721);
    CHECK(sc_f[1][3] == 7706);
    CHECK(sc_f[2][0] == 5400);
    CHECK(sc_f[2][1] == 5721);
    CHECK(sc_f[2][2] == 5802);
    CHECK(sc_f[2][3] == 7706);

    t = m.tet_tuple_from_vids(6848, 7442, 7519, 7622);
    sc_t = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 1);
    CHECK(sc_t[0][0] == 6848);
    CHECK(sc_t[0][1] == 7442);
    CHECK(sc_t[0][2] == 7519);
    CHECK(sc_t[0][3] == 7622);

    t = m.tet_tuple_from_vids(5135, 7611, 7881, 7912);
    sc_t = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 1);
    CHECK(sc_t[0][0] == 5135);
    CHECK(sc_t[0][1] == 7611);
    CHECK(sc_t[0][2] == 7881);
    CHECK(sc_t[0][3] == 7912);

    t = m.tet_tuple_from_vids(1272, 1383, 7329, 7790);
    sc_t = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 1);
    CHECK(sc_t[0][0] == 1272);
    CHECK(sc_t[0][1] == 1383);
    CHECK(sc_t[0][2] == 7329);
    CHECK(sc_t[0][3] == 7790);
}

TEST_CASE("closed_star_bunny_tetwild_80", "[simplicial_complex][closed_star][3D]")
{
    Eigen::MatrixXd V;
    Eigen::MatrixXi T;
    Eigen::MatrixXi F;
    Eigen::VectorXi Tritag, Tettag;
    std::string name = "/bunny_tetwild_80.msh";
    std::string path;
    path.append(WMTK_DATA_DIR);
    path.append(name);
    igl::readMSH(path, V, F, T, Tritag, Tettag);
    tests_3d::DEBUG_TetMesh m;
    RowVectors4l Tr;
    Tr.resize(T.rows(), T.cols());
    assert(T.cols() == 4);
    for (long i = 0; i < T.rows(); i++) {
        Tr(i, 0) = T(i, 0);
        Tr(i, 1) = T(i, 1);
        Tr(i, 2) = T(i, 2);
        Tr(i, 3) = T(i, 3);
    }
    m.initialize(Tr);

    Tuple t;
    std::vector<std::vector<long>> sc_v, sc_e, sc_f, sc_t;
    t = m.tuple_from_id(PV, 4869);
    sc_v = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 39);
    CHECK(sc_v[0][0] == 4830);
    CHECK(sc_v[1][0] == 4839);
    CHECK(sc_v[2][0] == 4844);
    CHECK(sc_v[3][0] == 4845);
    CHECK(sc_v[4][0] == 4869);
    CHECK(sc_v[5][0] == 4911);
    CHECK(sc_v[6][0] == 4937);
    CHECK(sc_v[7][0] == 4830);
    CHECK(sc_v[7][1] == 4844);
    CHECK(sc_v[8][0] == 4830);
    CHECK(sc_v[8][1] == 4845);
    CHECK(sc_v[9][0] == 4830);
    CHECK(sc_v[9][1] == 4869);
    CHECK(sc_v[10][0] == 4830);
    CHECK(sc_v[10][1] == 4911);
    CHECK(sc_v[11][0] == 4839);
    CHECK(sc_v[11][1] == 4844);
    CHECK(sc_v[12][0] == 4839);
    CHECK(sc_v[12][1] == 4845);
    CHECK(sc_v[13][0] == 4839);
    CHECK(sc_v[13][1] == 4869);
    CHECK(sc_v[14][0] == 4844);
    CHECK(sc_v[14][1] == 4845);
    CHECK(sc_v[15][0] == 4844);
    CHECK(sc_v[15][1] == 4869);
    CHECK(sc_v[16][0] == 4845);
    CHECK(sc_v[16][1] == 4869);
    CHECK(sc_v[17][0] == 4845);
    CHECK(sc_v[17][1] == 4911);
    CHECK(sc_v[18][0] == 4845);
    CHECK(sc_v[18][1] == 4937);
    CHECK(sc_v[19][0] == 4869);
    CHECK(sc_v[19][1] == 4911);
    CHECK(sc_v[20][0] == 4869);
    CHECK(sc_v[20][1] == 4937);
    CHECK(sc_v[21][0] == 4911);
    CHECK(sc_v[21][1] == 4937);
    CHECK(sc_v[22][0] == 4830);
    CHECK(sc_v[22][1] == 4844);
    CHECK(sc_v[22][2] == 4845);
    CHECK(sc_v[23][0] == 4830);
    CHECK(sc_v[23][1] == 4844);
    CHECK(sc_v[23][2] == 4869);
    CHECK(sc_v[24][0] == 4830);
    CHECK(sc_v[24][1] == 4845);
    CHECK(sc_v[24][2] == 4869);
    CHECK(sc_v[25][0] == 4830);
    CHECK(sc_v[25][1] == 4845);
    CHECK(sc_v[25][2] == 4911);
    CHECK(sc_v[26][0] == 4830);
    CHECK(sc_v[26][1] == 4869);
    CHECK(sc_v[26][2] == 4911);
    CHECK(sc_v[27][0] == 4839);
    CHECK(sc_v[27][1] == 4844);
    CHECK(sc_v[27][2] == 4845);
    CHECK(sc_v[28][0] == 4839);
    CHECK(sc_v[28][1] == 4844);
    CHECK(sc_v[28][2] == 4869);
    CHECK(sc_v[29][0] == 4839);
    CHECK(sc_v[29][1] == 4845);
    CHECK(sc_v[29][2] == 4869);
    CHECK(sc_v[30][0] == 4844);
    CHECK(sc_v[30][1] == 4845);
    CHECK(sc_v[30][2] == 4869);
    CHECK(sc_v[31][0] == 4845);
    CHECK(sc_v[31][1] == 4869);
    CHECK(sc_v[31][2] == 4911);
    CHECK(sc_v[32][0] == 4845);
    CHECK(sc_v[32][1] == 4869);
    CHECK(sc_v[32][2] == 4937);
    CHECK(sc_v[33][0] == 4845);
    CHECK(sc_v[33][1] == 4911);
    CHECK(sc_v[33][2] == 4937);
    CHECK(sc_v[34][0] == 4869);
    CHECK(sc_v[34][1] == 4911);
    CHECK(sc_v[34][2] == 4937);
    CHECK(sc_v[35][0] == 4830);
    CHECK(sc_v[35][1] == 4844);
    CHECK(sc_v[35][2] == 4845);
    CHECK(sc_v[35][3] == 4869);
    CHECK(sc_v[36][0] == 4830);
    CHECK(sc_v[36][1] == 4845);
    CHECK(sc_v[36][2] == 4869);
    CHECK(sc_v[36][3] == 4911);
    CHECK(sc_v[37][0] == 4839);
    CHECK(sc_v[37][1] == 4844);
    CHECK(sc_v[37][2] == 4845);
    CHECK(sc_v[37][3] == 4869);
    CHECK(sc_v[38][0] == 4845);
    CHECK(sc_v[38][1] == 4869);
    CHECK(sc_v[38][2] == 4911);
    CHECK(sc_v[38][3] == 4937);

    t = m.tuple_from_id(PV, 4940);
    sc_v = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 107);
    CHECK(sc_v[0][0] == 2480);
    CHECK(sc_v[1][0] == 4840);
    CHECK(sc_v[2][0] == 4855);
    CHECK(sc_v[3][0] == 4872);
    CHECK(sc_v[4][0] == 4900);
    CHECK(sc_v[5][0] == 4940);
    CHECK(sc_v[6][0] == 4965);
    CHECK(sc_v[7][0] == 5014);
    CHECK(sc_v[8][0] == 5016);
    CHECK(sc_v[9][0] == 5018);
    CHECK(sc_v[10][0] == 5095);
    CHECK(sc_v[11][0] == 7552);
    CHECK(sc_v[12][0] == 7722);
    CHECK(sc_v[13][0] == 2480);
    CHECK(sc_v[13][1] == 4855);
    CHECK(sc_v[14][0] == 2480);
    CHECK(sc_v[14][1] == 4940);
    CHECK(sc_v[15][0] == 2480);
    CHECK(sc_v[15][1] == 4965);
    CHECK(sc_v[16][0] == 2480);
    CHECK(sc_v[16][1] == 5014);
    CHECK(sc_v[17][0] == 2480);
    CHECK(sc_v[17][1] == 5016);
    CHECK(sc_v[18][0] == 2480);
    CHECK(sc_v[18][1] == 5095);
    CHECK(sc_v[19][0] == 2480);
    CHECK(sc_v[19][1] == 7552);
    CHECK(sc_v[20][0] == 2480);
    CHECK(sc_v[20][1] == 7722);
    CHECK(sc_v[21][0] == 4840);
    CHECK(sc_v[21][1] == 4855);
    CHECK(sc_v[22][0] == 4840);
    CHECK(sc_v[22][1] == 4872);
    CHECK(sc_v[23][0] == 4840);
    CHECK(sc_v[23][1] == 4900);
    CHECK(sc_v[24][0] == 4840);
    CHECK(sc_v[24][1] == 4940);
    CHECK(sc_v[25][0] == 4840);
    CHECK(sc_v[25][1] == 7552);
    CHECK(sc_v[26][0] == 4855);
    CHECK(sc_v[26][1] == 4900);
    CHECK(sc_v[27][0] == 4855);
    CHECK(sc_v[27][1] == 4940);
    CHECK(sc_v[28][0] == 4855);
    CHECK(sc_v[28][1] == 5014);
    CHECK(sc_v[29][0] == 4855);
    CHECK(sc_v[29][1] == 7552);
    CHECK(sc_v[30][0] == 4872);
    CHECK(sc_v[30][1] == 4940);
    CHECK(sc_v[31][0] == 4872);
    CHECK(sc_v[31][1] == 4965);
    CHECK(sc_v[32][0] == 4872);
    CHECK(sc_v[32][1] == 7552);
    CHECK(sc_v[33][0] == 4900);
    CHECK(sc_v[33][1] == 4940);
    CHECK(sc_v[34][0] == 4900);
    CHECK(sc_v[34][1] == 5014);
    CHECK(sc_v[35][0] == 4900);
    CHECK(sc_v[35][1] == 5018);
    CHECK(sc_v[36][0] == 4900);
    CHECK(sc_v[36][1] == 5095);
    CHECK(sc_v[37][0] == 4940);
    CHECK(sc_v[37][1] == 4965);
    CHECK(sc_v[38][0] == 4940);
    CHECK(sc_v[38][1] == 5014);
    CHECK(sc_v[39][0] == 4940);
    CHECK(sc_v[39][1] == 5016);
    CHECK(sc_v[40][0] == 4940);
    CHECK(sc_v[40][1] == 5018);
    CHECK(sc_v[41][0] == 4940);
    CHECK(sc_v[41][1] == 5095);
    CHECK(sc_v[42][0] == 4940);
    CHECK(sc_v[42][1] == 7552);
    CHECK(sc_v[43][0] == 4940);
    CHECK(sc_v[43][1] == 7722);
    CHECK(sc_v[44][0] == 4965);
    CHECK(sc_v[44][1] == 7552);
    CHECK(sc_v[45][0] == 4965);
    CHECK(sc_v[45][1] == 7722);
    CHECK(sc_v[46][0] == 5014);
    CHECK(sc_v[46][1] == 5095);
    CHECK(sc_v[47][0] == 5016);
    CHECK(sc_v[47][1] == 5018);
    CHECK(sc_v[48][0] == 5016);
    CHECK(sc_v[48][1] == 5095);
    CHECK(sc_v[49][0] == 5016);
    CHECK(sc_v[49][1] == 7722);
    CHECK(sc_v[50][0] == 5018);
    CHECK(sc_v[50][1] == 5095);
    CHECK(sc_v[51][0] == 2480);
    CHECK(sc_v[51][1] == 4855);
    CHECK(sc_v[51][2] == 4940);
    CHECK(sc_v[52][0] == 2480);
    CHECK(sc_v[52][1] == 4855);
    CHECK(sc_v[52][2] == 5014);
    CHECK(sc_v[53][0] == 2480);
    CHECK(sc_v[53][1] == 4855);
    CHECK(sc_v[53][2] == 7552);
    CHECK(sc_v[54][0] == 2480);
    CHECK(sc_v[54][1] == 4940);
    CHECK(sc_v[54][2] == 4965);
    CHECK(sc_v[55][0] == 2480);
    CHECK(sc_v[55][1] == 4940);
    CHECK(sc_v[55][2] == 5014);
    CHECK(sc_v[56][0] == 2480);
    CHECK(sc_v[56][1] == 4940);
    CHECK(sc_v[56][2] == 5016);
    CHECK(sc_v[57][0] == 2480);
    CHECK(sc_v[57][1] == 4940);
    CHECK(sc_v[57][2] == 5095);
    CHECK(sc_v[58][0] == 2480);
    CHECK(sc_v[58][1] == 4940);
    CHECK(sc_v[58][2] == 7552);
    CHECK(sc_v[59][0] == 2480);
    CHECK(sc_v[59][1] == 4940);
    CHECK(sc_v[59][2] == 7722);
    CHECK(sc_v[60][0] == 2480);
    CHECK(sc_v[60][1] == 4965);
    CHECK(sc_v[60][2] == 7552);
    CHECK(sc_v[61][0] == 2480);
    CHECK(sc_v[61][1] == 4965);
    CHECK(sc_v[61][2] == 7722);
    CHECK(sc_v[62][0] == 2480);
    CHECK(sc_v[62][1] == 5014);
    CHECK(sc_v[62][2] == 5095);
    CHECK(sc_v[63][0] == 2480);
    CHECK(sc_v[63][1] == 5016);
    CHECK(sc_v[63][2] == 5095);
    CHECK(sc_v[64][0] == 2480);
    CHECK(sc_v[64][1] == 5016);
    CHECK(sc_v[64][2] == 7722);
    CHECK(sc_v[65][0] == 4840);
    CHECK(sc_v[65][1] == 4855);
    CHECK(sc_v[65][2] == 4900);
    CHECK(sc_v[66][0] == 4840);
    CHECK(sc_v[66][1] == 4855);
    CHECK(sc_v[66][2] == 4940);
    CHECK(sc_v[67][0] == 4840);
    CHECK(sc_v[67][1] == 4855);
    CHECK(sc_v[67][2] == 7552);
    CHECK(sc_v[68][0] == 4840);
    CHECK(sc_v[68][1] == 4872);
    CHECK(sc_v[68][2] == 4940);
    CHECK(sc_v[69][0] == 4840);
    CHECK(sc_v[69][1] == 4872);
    CHECK(sc_v[69][2] == 7552);
    CHECK(sc_v[70][0] == 4840);
    CHECK(sc_v[70][1] == 4900);
    CHECK(sc_v[70][2] == 4940);
    CHECK(sc_v[71][0] == 4840);
    CHECK(sc_v[71][1] == 4940);
    CHECK(sc_v[71][2] == 7552);
    CHECK(sc_v[72][0] == 4855);
    CHECK(sc_v[72][1] == 4900);
    CHECK(sc_v[72][2] == 4940);
    CHECK(sc_v[73][0] == 4855);
    CHECK(sc_v[73][1] == 4900);
    CHECK(sc_v[73][2] == 5014);
    CHECK(sc_v[74][0] == 4855);
    CHECK(sc_v[74][1] == 4940);
    CHECK(sc_v[74][2] == 5014);
    CHECK(sc_v[75][0] == 4855);
    CHECK(sc_v[75][1] == 4940);
    CHECK(sc_v[75][2] == 7552);
    CHECK(sc_v[76][0] == 4872);
    CHECK(sc_v[76][1] == 4940);
    CHECK(sc_v[76][2] == 4965);
    CHECK(sc_v[77][0] == 4872);
    CHECK(sc_v[77][1] == 4940);
    CHECK(sc_v[77][2] == 7552);
    CHECK(sc_v[78][0] == 4872);
    CHECK(sc_v[78][1] == 4965);
    CHECK(sc_v[78][2] == 7552);
    CHECK(sc_v[79][0] == 4900);
    CHECK(sc_v[79][1] == 4940);
    CHECK(sc_v[79][2] == 5014);
    CHECK(sc_v[80][0] == 4900);
    CHECK(sc_v[80][1] == 4940);
    CHECK(sc_v[80][2] == 5018);
    CHECK(sc_v[81][0] == 4900);
    CHECK(sc_v[81][1] == 4940);
    CHECK(sc_v[81][2] == 5095);
    CHECK(sc_v[82][0] == 4900);
    CHECK(sc_v[82][1] == 5014);
    CHECK(sc_v[82][2] == 5095);
    CHECK(sc_v[83][0] == 4900);
    CHECK(sc_v[83][1] == 5018);
    CHECK(sc_v[83][2] == 5095);
    CHECK(sc_v[84][0] == 4940);
    CHECK(sc_v[84][1] == 4965);
    CHECK(sc_v[84][2] == 7552);
    CHECK(sc_v[85][0] == 4940);
    CHECK(sc_v[85][1] == 4965);
    CHECK(sc_v[85][2] == 7722);
    CHECK(sc_v[86][0] == 4940);
    CHECK(sc_v[86][1] == 5014);
    CHECK(sc_v[86][2] == 5095);
    CHECK(sc_v[87][0] == 4940);
    CHECK(sc_v[87][1] == 5016);
    CHECK(sc_v[87][2] == 5018);
    CHECK(sc_v[88][0] == 4940);
    CHECK(sc_v[88][1] == 5016);
    CHECK(sc_v[88][2] == 5095);
    CHECK(sc_v[89][0] == 4940);
    CHECK(sc_v[89][1] == 5016);
    CHECK(sc_v[89][2] == 7722);
    CHECK(sc_v[90][0] == 4940);
    CHECK(sc_v[90][1] == 5018);
    CHECK(sc_v[90][2] == 5095);
    CHECK(sc_v[91][0] == 5016);
    CHECK(sc_v[91][1] == 5018);
    CHECK(sc_v[91][2] == 5095);
    CHECK(sc_v[92][0] == 2480);
    CHECK(sc_v[92][1] == 4855);
    CHECK(sc_v[92][2] == 4940);
    CHECK(sc_v[92][3] == 5014);
    CHECK(sc_v[93][0] == 2480);
    CHECK(sc_v[93][1] == 4855);
    CHECK(sc_v[93][2] == 4940);
    CHECK(sc_v[93][3] == 7552);
    CHECK(sc_v[94][0] == 2480);
    CHECK(sc_v[94][1] == 4940);
    CHECK(sc_v[94][2] == 4965);
    CHECK(sc_v[94][3] == 7552);
    CHECK(sc_v[95][0] == 2480);
    CHECK(sc_v[95][1] == 4940);
    CHECK(sc_v[95][2] == 4965);
    CHECK(sc_v[95][3] == 7722);
    CHECK(sc_v[96][0] == 2480);
    CHECK(sc_v[96][1] == 4940);
    CHECK(sc_v[96][2] == 5014);
    CHECK(sc_v[96][3] == 5095);
    CHECK(sc_v[97][0] == 2480);
    CHECK(sc_v[97][1] == 4940);
    CHECK(sc_v[97][2] == 5016);
    CHECK(sc_v[97][3] == 5095);
    CHECK(sc_v[98][0] == 2480);
    CHECK(sc_v[98][1] == 4940);
    CHECK(sc_v[98][2] == 5016);
    CHECK(sc_v[98][3] == 7722);
    CHECK(sc_v[99][0] == 4840);
    CHECK(sc_v[99][1] == 4855);
    CHECK(sc_v[99][2] == 4900);
    CHECK(sc_v[99][3] == 4940);
    CHECK(sc_v[100][0] == 4840);
    CHECK(sc_v[100][1] == 4855);
    CHECK(sc_v[100][2] == 4940);
    CHECK(sc_v[100][3] == 7552);
    CHECK(sc_v[101][0] == 4840);
    CHECK(sc_v[101][1] == 4872);
    CHECK(sc_v[101][2] == 4940);
    CHECK(sc_v[101][3] == 7552);
    CHECK(sc_v[102][0] == 4855);
    CHECK(sc_v[102][1] == 4900);
    CHECK(sc_v[102][2] == 4940);
    CHECK(sc_v[102][3] == 5014);
    CHECK(sc_v[103][0] == 4872);
    CHECK(sc_v[103][1] == 4940);
    CHECK(sc_v[103][2] == 4965);
    CHECK(sc_v[103][3] == 7552);
    CHECK(sc_v[104][0] == 4900);
    CHECK(sc_v[104][1] == 4940);
    CHECK(sc_v[104][2] == 5014);
    CHECK(sc_v[104][3] == 5095);
    CHECK(sc_v[105][0] == 4900);
    CHECK(sc_v[105][1] == 4940);
    CHECK(sc_v[105][2] == 5018);
    CHECK(sc_v[105][3] == 5095);
    CHECK(sc_v[106][0] == 4940);
    CHECK(sc_v[106][1] == 5016);
    CHECK(sc_v[106][2] == 5018);
    CHECK(sc_v[106][3] == 5095);

    t = m.tuple_from_id(PV, 4526);
    sc_v = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 63);
    CHECK(sc_v[0][0] == 2592);
    CHECK(sc_v[1][0] == 4425);
    CHECK(sc_v[2][0] == 4470);
    CHECK(sc_v[3][0] == 4506);
    CHECK(sc_v[4][0] == 4526);
    CHECK(sc_v[5][0] == 4610);
    CHECK(sc_v[6][0] == 4627);
    CHECK(sc_v[7][0] == 4687);
    CHECK(sc_v[8][0] == 7385);
    CHECK(sc_v[9][0] == 2592);
    CHECK(sc_v[9][1] == 4425);
    CHECK(sc_v[10][0] == 2592);
    CHECK(sc_v[10][1] == 4470);
    CHECK(sc_v[11][0] == 2592);
    CHECK(sc_v[11][1] == 4506);
    CHECK(sc_v[12][0] == 2592);
    CHECK(sc_v[12][1] == 4526);
    CHECK(sc_v[13][0] == 2592);
    CHECK(sc_v[13][1] == 4610);
    CHECK(sc_v[14][0] == 2592);
    CHECK(sc_v[14][1] == 4687);
    CHECK(sc_v[15][0] == 2592);
    CHECK(sc_v[15][1] == 7385);
    CHECK(sc_v[16][0] == 4425);
    CHECK(sc_v[16][1] == 4470);
    CHECK(sc_v[17][0] == 4425);
    CHECK(sc_v[17][1] == 4506);
    CHECK(sc_v[18][0] == 4425);
    CHECK(sc_v[18][1] == 4526);
    CHECK(sc_v[19][0] == 4470);
    CHECK(sc_v[19][1] == 4526);
    CHECK(sc_v[20][0] == 4470);
    CHECK(sc_v[20][1] == 4627);
    CHECK(sc_v[21][0] == 4470);
    CHECK(sc_v[21][1] == 7385);
    CHECK(sc_v[22][0] == 4506);
    CHECK(sc_v[22][1] == 4526);
    CHECK(sc_v[23][0] == 4506);
    CHECK(sc_v[23][1] == 4610);
    CHECK(sc_v[24][0] == 4526);
    CHECK(sc_v[24][1] == 4610);
    CHECK(sc_v[25][0] == 4526);
    CHECK(sc_v[25][1] == 4627);
    CHECK(sc_v[26][0] == 4526);
    CHECK(sc_v[26][1] == 4687);
    CHECK(sc_v[27][0] == 4526);
    CHECK(sc_v[27][1] == 7385);
    CHECK(sc_v[28][0] == 4610);
    CHECK(sc_v[28][1] == 4687);
    CHECK(sc_v[29][0] == 4627);
    CHECK(sc_v[29][1] == 4687);
    CHECK(sc_v[30][0] == 4627);
    CHECK(sc_v[30][1] == 7385);
    CHECK(sc_v[31][0] == 4687);
    CHECK(sc_v[31][1] == 7385);
    CHECK(sc_v[32][0] == 2592);
    CHECK(sc_v[32][1] == 4425);
    CHECK(sc_v[32][2] == 4470);
    CHECK(sc_v[33][0] == 2592);
    CHECK(sc_v[33][1] == 4425);
    CHECK(sc_v[33][2] == 4506);
    CHECK(sc_v[34][0] == 2592);
    CHECK(sc_v[34][1] == 4425);
    CHECK(sc_v[34][2] == 4526);
    CHECK(sc_v[35][0] == 2592);
    CHECK(sc_v[35][1] == 4470);
    CHECK(sc_v[35][2] == 4526);
    CHECK(sc_v[36][0] == 2592);
    CHECK(sc_v[36][1] == 4470);
    CHECK(sc_v[36][2] == 7385);
    CHECK(sc_v[37][0] == 2592);
    CHECK(sc_v[37][1] == 4506);
    CHECK(sc_v[37][2] == 4526);
    CHECK(sc_v[38][0] == 2592);
    CHECK(sc_v[38][1] == 4506);
    CHECK(sc_v[38][2] == 4610);
    CHECK(sc_v[39][0] == 2592);
    CHECK(sc_v[39][1] == 4526);
    CHECK(sc_v[39][2] == 4610);
    CHECK(sc_v[40][0] == 2592);
    CHECK(sc_v[40][1] == 4526);
    CHECK(sc_v[40][2] == 4687);
    CHECK(sc_v[41][0] == 2592);
    CHECK(sc_v[41][1] == 4526);
    CHECK(sc_v[41][2] == 7385);
    CHECK(sc_v[42][0] == 2592);
    CHECK(sc_v[42][1] == 4610);
    CHECK(sc_v[42][2] == 4687);
    CHECK(sc_v[43][0] == 2592);
    CHECK(sc_v[43][1] == 4687);
    CHECK(sc_v[43][2] == 7385);
    CHECK(sc_v[44][0] == 4425);
    CHECK(sc_v[44][1] == 4470);
    CHECK(sc_v[44][2] == 4526);
    CHECK(sc_v[45][0] == 4425);
    CHECK(sc_v[45][1] == 4506);
    CHECK(sc_v[45][2] == 4526);
    CHECK(sc_v[46][0] == 4470);
    CHECK(sc_v[46][1] == 4526);
    CHECK(sc_v[46][2] == 4627);
    CHECK(sc_v[47][0] == 4470);
    CHECK(sc_v[47][1] == 4526);
    CHECK(sc_v[47][2] == 7385);
    CHECK(sc_v[48][0] == 4470);
    CHECK(sc_v[48][1] == 4627);
    CHECK(sc_v[48][2] == 7385);
    CHECK(sc_v[49][0] == 4506);
    CHECK(sc_v[49][1] == 4526);
    CHECK(sc_v[49][2] == 4610);
    CHECK(sc_v[50][0] == 4526);
    CHECK(sc_v[50][1] == 4610);
    CHECK(sc_v[50][2] == 4687);
    CHECK(sc_v[51][0] == 4526);
    CHECK(sc_v[51][1] == 4627);
    CHECK(sc_v[51][2] == 4687);
    CHECK(sc_v[52][0] == 4526);
    CHECK(sc_v[52][1] == 4627);
    CHECK(sc_v[52][2] == 7385);
    CHECK(sc_v[53][0] == 4526);
    CHECK(sc_v[53][1] == 4687);
    CHECK(sc_v[53][2] == 7385);
    CHECK(sc_v[54][0] == 4627);
    CHECK(sc_v[54][1] == 4687);
    CHECK(sc_v[54][2] == 7385);
    CHECK(sc_v[55][0] == 2592);
    CHECK(sc_v[55][1] == 4425);
    CHECK(sc_v[55][2] == 4470);
    CHECK(sc_v[55][3] == 4526);
    CHECK(sc_v[56][0] == 2592);
    CHECK(sc_v[56][1] == 4425);
    CHECK(sc_v[56][2] == 4506);
    CHECK(sc_v[56][3] == 4526);
    CHECK(sc_v[57][0] == 2592);
    CHECK(sc_v[57][1] == 4470);
    CHECK(sc_v[57][2] == 4526);
    CHECK(sc_v[57][3] == 7385);
    CHECK(sc_v[58][0] == 2592);
    CHECK(sc_v[58][1] == 4506);
    CHECK(sc_v[58][2] == 4526);
    CHECK(sc_v[58][3] == 4610);
    CHECK(sc_v[59][0] == 2592);
    CHECK(sc_v[59][1] == 4526);
    CHECK(sc_v[59][2] == 4610);
    CHECK(sc_v[59][3] == 4687);
    CHECK(sc_v[60][0] == 2592);
    CHECK(sc_v[60][1] == 4526);
    CHECK(sc_v[60][2] == 4687);
    CHECK(sc_v[60][3] == 7385);
    CHECK(sc_v[61][0] == 4470);
    CHECK(sc_v[61][1] == 4526);
    CHECK(sc_v[61][2] == 4627);
    CHECK(sc_v[61][3] == 7385);
    CHECK(sc_v[62][0] == 4526);
    CHECK(sc_v[62][1] == 4627);
    CHECK(sc_v[62][2] == 4687);
    CHECK(sc_v[62][3] == 7385);

    t = m.edge_tuple_from_vids(2697, 2891);
    sc_e = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 23);
    CHECK(sc_e[0][0] == 2697);
    CHECK(sc_e[1][0] == 2728);
    CHECK(sc_e[2][0] == 2813);
    CHECK(sc_e[3][0] == 2891);
    CHECK(sc_e[4][0] == 3288);
    CHECK(sc_e[5][0] == 2697);
    CHECK(sc_e[5][1] == 2728);
    CHECK(sc_e[6][0] == 2697);
    CHECK(sc_e[6][1] == 2813);
    CHECK(sc_e[7][0] == 2697);
    CHECK(sc_e[7][1] == 2891);
    CHECK(sc_e[8][0] == 2697);
    CHECK(sc_e[8][1] == 3288);
    CHECK(sc_e[9][0] == 2728);
    CHECK(sc_e[9][1] == 2891);
    CHECK(sc_e[10][0] == 2728);
    CHECK(sc_e[10][1] == 3288);
    CHECK(sc_e[11][0] == 2813);
    CHECK(sc_e[11][1] == 2891);
    CHECK(sc_e[12][0] == 2813);
    CHECK(sc_e[12][1] == 3288);
    CHECK(sc_e[13][0] == 2891);
    CHECK(sc_e[13][1] == 3288);
    CHECK(sc_e[14][0] == 2697);
    CHECK(sc_e[14][1] == 2728);
    CHECK(sc_e[14][2] == 2891);
    CHECK(sc_e[15][0] == 2697);
    CHECK(sc_e[15][1] == 2728);
    CHECK(sc_e[15][2] == 3288);
    CHECK(sc_e[16][0] == 2697);
    CHECK(sc_e[16][1] == 2813);
    CHECK(sc_e[16][2] == 2891);
    CHECK(sc_e[17][0] == 2697);
    CHECK(sc_e[17][1] == 2813);
    CHECK(sc_e[17][2] == 3288);
    CHECK(sc_e[18][0] == 2697);
    CHECK(sc_e[18][1] == 2891);
    CHECK(sc_e[18][2] == 3288);
    CHECK(sc_e[19][0] == 2728);
    CHECK(sc_e[19][1] == 2891);
    CHECK(sc_e[19][2] == 3288);
    CHECK(sc_e[20][0] == 2813);
    CHECK(sc_e[20][1] == 2891);
    CHECK(sc_e[20][2] == 3288);
    CHECK(sc_e[21][0] == 2697);
    CHECK(sc_e[21][1] == 2728);
    CHECK(sc_e[21][2] == 2891);
    CHECK(sc_e[21][3] == 3288);
    CHECK(sc_e[22][0] == 2697);
    CHECK(sc_e[22][1] == 2813);
    CHECK(sc_e[22][2] == 2891);
    CHECK(sc_e[22][3] == 3288);

    t = m.edge_tuple_from_vids(785, 920);
    sc_e = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 23);
    CHECK(sc_e[0][0] == 757);
    CHECK(sc_e[1][0] == 785);
    CHECK(sc_e[2][0] == 920);
    CHECK(sc_e[3][0] == 930);
    CHECK(sc_e[4][0] == 7328);
    CHECK(sc_e[5][0] == 757);
    CHECK(sc_e[5][1] == 785);
    CHECK(sc_e[6][0] == 757);
    CHECK(sc_e[6][1] == 920);
    CHECK(sc_e[7][0] == 757);
    CHECK(sc_e[7][1] == 7328);
    CHECK(sc_e[8][0] == 785);
    CHECK(sc_e[8][1] == 920);
    CHECK(sc_e[9][0] == 785);
    CHECK(sc_e[9][1] == 930);
    CHECK(sc_e[10][0] == 785);
    CHECK(sc_e[10][1] == 7328);
    CHECK(sc_e[11][0] == 920);
    CHECK(sc_e[11][1] == 930);
    CHECK(sc_e[12][0] == 920);
    CHECK(sc_e[12][1] == 7328);
    CHECK(sc_e[13][0] == 930);
    CHECK(sc_e[13][1] == 7328);
    CHECK(sc_e[14][0] == 757);
    CHECK(sc_e[14][1] == 785);
    CHECK(sc_e[14][2] == 920);
    CHECK(sc_e[15][0] == 757);
    CHECK(sc_e[15][1] == 785);
    CHECK(sc_e[15][2] == 7328);
    CHECK(sc_e[16][0] == 757);
    CHECK(sc_e[16][1] == 920);
    CHECK(sc_e[16][2] == 7328);
    CHECK(sc_e[17][0] == 785);
    CHECK(sc_e[17][1] == 920);
    CHECK(sc_e[17][2] == 930);
    CHECK(sc_e[18][0] == 785);
    CHECK(sc_e[18][1] == 920);
    CHECK(sc_e[18][2] == 7328);
    CHECK(sc_e[19][0] == 785);
    CHECK(sc_e[19][1] == 930);
    CHECK(sc_e[19][2] == 7328);
    CHECK(sc_e[20][0] == 920);
    CHECK(sc_e[20][1] == 930);
    CHECK(sc_e[20][2] == 7328);
    CHECK(sc_e[21][0] == 757);
    CHECK(sc_e[21][1] == 785);
    CHECK(sc_e[21][2] == 920);
    CHECK(sc_e[21][3] == 7328);
    CHECK(sc_e[22][0] == 785);
    CHECK(sc_e[22][1] == 920);
    CHECK(sc_e[22][2] == 930);
    CHECK(sc_e[22][3] == 7328);

    t = m.edge_tuple_from_vids(5640, 7875);
    sc_e = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PE, t)).get_simplex_vector());
    REQUIRE(sc_e.size() == 43);
    CHECK(sc_e[0][0] == 5610);
    CHECK(sc_e[1][0] == 5631);
    CHECK(sc_e[2][0] == 5640);
    CHECK(sc_e[3][0] == 5668);
    CHECK(sc_e[4][0] == 5681);
    CHECK(sc_e[5][0] == 7390);
    CHECK(sc_e[6][0] == 7875);
    CHECK(sc_e[7][0] == 5610);
    CHECK(sc_e[7][1] == 5640);
    CHECK(sc_e[8][0] == 5610);
    CHECK(sc_e[8][1] == 5681);
    CHECK(sc_e[9][0] == 5610);
    CHECK(sc_e[9][1] == 7390);
    CHECK(sc_e[10][0] == 5610);
    CHECK(sc_e[10][1] == 7875);
    CHECK(sc_e[11][0] == 5631);
    CHECK(sc_e[11][1] == 5640);
    CHECK(sc_e[12][0] == 5631);
    CHECK(sc_e[12][1] == 5668);
    CHECK(sc_e[13][0] == 5631);
    CHECK(sc_e[13][1] == 7390);
    CHECK(sc_e[14][0] == 5631);
    CHECK(sc_e[14][1] == 7875);
    CHECK(sc_e[15][0] == 5640);
    CHECK(sc_e[15][1] == 5668);
    CHECK(sc_e[16][0] == 5640);
    CHECK(sc_e[16][1] == 5681);
    CHECK(sc_e[17][0] == 5640);
    CHECK(sc_e[17][1] == 7390);
    CHECK(sc_e[18][0] == 5640);
    CHECK(sc_e[18][1] == 7875);
    CHECK(sc_e[19][0] == 5668);
    CHECK(sc_e[19][1] == 5681);
    CHECK(sc_e[20][0] == 5668);
    CHECK(sc_e[20][1] == 7875);
    CHECK(sc_e[21][0] == 5681);
    CHECK(sc_e[21][1] == 7875);
    CHECK(sc_e[22][0] == 7390);
    CHECK(sc_e[22][1] == 7875);
    CHECK(sc_e[23][0] == 5610);
    CHECK(sc_e[23][1] == 5640);
    CHECK(sc_e[23][2] == 5681);
    CHECK(sc_e[24][0] == 5610);
    CHECK(sc_e[24][1] == 5640);
    CHECK(sc_e[24][2] == 7390);
    CHECK(sc_e[25][0] == 5610);
    CHECK(sc_e[25][1] == 5640);
    CHECK(sc_e[25][2] == 7875);
    CHECK(sc_e[26][0] == 5610);
    CHECK(sc_e[26][1] == 5681);
    CHECK(sc_e[26][2] == 7875);
    CHECK(sc_e[27][0] == 5610);
    CHECK(sc_e[27][1] == 7390);
    CHECK(sc_e[27][2] == 7875);
    CHECK(sc_e[28][0] == 5631);
    CHECK(sc_e[28][1] == 5640);
    CHECK(sc_e[28][2] == 5668);
    CHECK(sc_e[29][0] == 5631);
    CHECK(sc_e[29][1] == 5640);
    CHECK(sc_e[29][2] == 7390);
    CHECK(sc_e[30][0] == 5631);
    CHECK(sc_e[30][1] == 5640);
    CHECK(sc_e[30][2] == 7875);
    CHECK(sc_e[31][0] == 5631);
    CHECK(sc_e[31][1] == 5668);
    CHECK(sc_e[31][2] == 7875);
    CHECK(sc_e[32][0] == 5631);
    CHECK(sc_e[32][1] == 7390);
    CHECK(sc_e[32][2] == 7875);
    CHECK(sc_e[33][0] == 5640);
    CHECK(sc_e[33][1] == 5668);
    CHECK(sc_e[33][2] == 5681);
    CHECK(sc_e[34][0] == 5640);
    CHECK(sc_e[34][1] == 5668);
    CHECK(sc_e[34][2] == 7875);
    CHECK(sc_e[35][0] == 5640);
    CHECK(sc_e[35][1] == 5681);
    CHECK(sc_e[35][2] == 7875);
    CHECK(sc_e[36][0] == 5640);
    CHECK(sc_e[36][1] == 7390);
    CHECK(sc_e[36][2] == 7875);
    CHECK(sc_e[37][0] == 5668);
    CHECK(sc_e[37][1] == 5681);
    CHECK(sc_e[37][2] == 7875);
    CHECK(sc_e[38][0] == 5610);
    CHECK(sc_e[38][1] == 5640);
    CHECK(sc_e[38][2] == 5681);
    CHECK(sc_e[38][3] == 7875);
    CHECK(sc_e[39][0] == 5610);
    CHECK(sc_e[39][1] == 5640);
    CHECK(sc_e[39][2] == 7390);
    CHECK(sc_e[39][3] == 7875);
    CHECK(sc_e[40][0] == 5631);
    CHECK(sc_e[40][1] == 5640);
    CHECK(sc_e[40][2] == 5668);
    CHECK(sc_e[40][3] == 7875);
    CHECK(sc_e[41][0] == 5631);
    CHECK(sc_e[41][1] == 5640);
    CHECK(sc_e[41][2] == 7390);
    CHECK(sc_e[41][3] == 7875);
    CHECK(sc_e[42][0] == 5640);
    CHECK(sc_e[42][1] == 5668);
    CHECK(sc_e[42][2] == 5681);
    CHECK(sc_e[42][3] == 7875);

    t = m.face_tuple_from_vids(4027, 4161, 7356);
    sc_f = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 23);
    CHECK(sc_f[0][0] == 3906);
    CHECK(sc_f[1][0] == 4027);
    CHECK(sc_f[2][0] == 4159);
    CHECK(sc_f[3][0] == 4161);
    CHECK(sc_f[4][0] == 7356);
    CHECK(sc_f[5][0] == 3906);
    CHECK(sc_f[5][1] == 4027);
    CHECK(sc_f[6][0] == 3906);
    CHECK(sc_f[6][1] == 4161);
    CHECK(sc_f[7][0] == 3906);
    CHECK(sc_f[7][1] == 7356);
    CHECK(sc_f[8][0] == 4027);
    CHECK(sc_f[8][1] == 4159);
    CHECK(sc_f[9][0] == 4027);
    CHECK(sc_f[9][1] == 4161);
    CHECK(sc_f[10][0] == 4027);
    CHECK(sc_f[10][1] == 7356);
    CHECK(sc_f[11][0] == 4159);
    CHECK(sc_f[11][1] == 4161);
    CHECK(sc_f[12][0] == 4159);
    CHECK(sc_f[12][1] == 7356);
    CHECK(sc_f[13][0] == 4161);
    CHECK(sc_f[13][1] == 7356);
    CHECK(sc_f[14][0] == 3906);
    CHECK(sc_f[14][1] == 4027);
    CHECK(sc_f[14][2] == 4161);
    CHECK(sc_f[15][0] == 3906);
    CHECK(sc_f[15][1] == 4027);
    CHECK(sc_f[15][2] == 7356);
    CHECK(sc_f[16][0] == 3906);
    CHECK(sc_f[16][1] == 4161);
    CHECK(sc_f[16][2] == 7356);
    CHECK(sc_f[17][0] == 4027);
    CHECK(sc_f[17][1] == 4159);
    CHECK(sc_f[17][2] == 4161);
    CHECK(sc_f[18][0] == 4027);
    CHECK(sc_f[18][1] == 4159);
    CHECK(sc_f[18][2] == 7356);
    CHECK(sc_f[19][0] == 4027);
    CHECK(sc_f[19][1] == 4161);
    CHECK(sc_f[19][2] == 7356);
    CHECK(sc_f[20][0] == 4159);
    CHECK(sc_f[20][1] == 4161);
    CHECK(sc_f[20][2] == 7356);
    CHECK(sc_f[21][0] == 3906);
    CHECK(sc_f[21][1] == 4027);
    CHECK(sc_f[21][2] == 4161);
    CHECK(sc_f[21][3] == 7356);
    CHECK(sc_f[22][0] == 4027);
    CHECK(sc_f[22][1] == 4159);
    CHECK(sc_f[22][2] == 4161);
    CHECK(sc_f[22][3] == 7356);

    t = m.face_tuple_from_vids(3007, 3336, 3577);
    sc_f = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 23);
    CHECK(sc_f[0][0] == 3007);
    CHECK(sc_f[1][0] == 3037);
    CHECK(sc_f[2][0] == 3336);
    CHECK(sc_f[3][0] == 3445);
    CHECK(sc_f[4][0] == 3577);
    CHECK(sc_f[5][0] == 3007);
    CHECK(sc_f[5][1] == 3037);
    CHECK(sc_f[6][0] == 3007);
    CHECK(sc_f[6][1] == 3336);
    CHECK(sc_f[7][0] == 3007);
    CHECK(sc_f[7][1] == 3445);
    CHECK(sc_f[8][0] == 3007);
    CHECK(sc_f[8][1] == 3577);
    CHECK(sc_f[9][0] == 3037);
    CHECK(sc_f[9][1] == 3336);
    CHECK(sc_f[10][0] == 3037);
    CHECK(sc_f[10][1] == 3577);
    CHECK(sc_f[11][0] == 3336);
    CHECK(sc_f[11][1] == 3445);
    CHECK(sc_f[12][0] == 3336);
    CHECK(sc_f[12][1] == 3577);
    CHECK(sc_f[13][0] == 3445);
    CHECK(sc_f[13][1] == 3577);
    CHECK(sc_f[14][0] == 3007);
    CHECK(sc_f[14][1] == 3037);
    CHECK(sc_f[14][2] == 3336);
    CHECK(sc_f[15][0] == 3007);
    CHECK(sc_f[15][1] == 3037);
    CHECK(sc_f[15][2] == 3577);
    CHECK(sc_f[16][0] == 3007);
    CHECK(sc_f[16][1] == 3336);
    CHECK(sc_f[16][2] == 3445);
    CHECK(sc_f[17][0] == 3007);
    CHECK(sc_f[17][1] == 3336);
    CHECK(sc_f[17][2] == 3577);
    CHECK(sc_f[18][0] == 3007);
    CHECK(sc_f[18][1] == 3445);
    CHECK(sc_f[18][2] == 3577);
    CHECK(sc_f[19][0] == 3037);
    CHECK(sc_f[19][1] == 3336);
    CHECK(sc_f[19][2] == 3577);
    CHECK(sc_f[20][0] == 3336);
    CHECK(sc_f[20][1] == 3445);
    CHECK(sc_f[20][2] == 3577);
    CHECK(sc_f[21][0] == 3007);
    CHECK(sc_f[21][1] == 3037);
    CHECK(sc_f[21][2] == 3336);
    CHECK(sc_f[21][3] == 3577);
    CHECK(sc_f[22][0] == 3007);
    CHECK(sc_f[22][1] == 3336);
    CHECK(sc_f[22][2] == 3445);
    CHECK(sc_f[22][3] == 3577);

    t = m.face_tuple_from_vids(5176, 5254, 7472);
    sc_f = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PF, t)).get_simplex_vector());
    REQUIRE(sc_f.size() == 23);
    CHECK(sc_f[0][0] == 5176);
    CHECK(sc_f[1][0] == 5178);
    CHECK(sc_f[2][0] == 5214);
    CHECK(sc_f[3][0] == 5254);
    CHECK(sc_f[4][0] == 7472);
    CHECK(sc_f[5][0] == 5176);
    CHECK(sc_f[5][1] == 5178);
    CHECK(sc_f[6][0] == 5176);
    CHECK(sc_f[6][1] == 5214);
    CHECK(sc_f[7][0] == 5176);
    CHECK(sc_f[7][1] == 5254);
    CHECK(sc_f[8][0] == 5176);
    CHECK(sc_f[8][1] == 7472);
    CHECK(sc_f[9][0] == 5178);
    CHECK(sc_f[9][1] == 5254);
    CHECK(sc_f[10][0] == 5178);
    CHECK(sc_f[10][1] == 7472);
    CHECK(sc_f[11][0] == 5214);
    CHECK(sc_f[11][1] == 5254);
    CHECK(sc_f[12][0] == 5214);
    CHECK(sc_f[12][1] == 7472);
    CHECK(sc_f[13][0] == 5254);
    CHECK(sc_f[13][1] == 7472);
    CHECK(sc_f[14][0] == 5176);
    CHECK(sc_f[14][1] == 5178);
    CHECK(sc_f[14][2] == 5254);
    CHECK(sc_f[15][0] == 5176);
    CHECK(sc_f[15][1] == 5178);
    CHECK(sc_f[15][2] == 7472);
    CHECK(sc_f[16][0] == 5176);
    CHECK(sc_f[16][1] == 5214);
    CHECK(sc_f[16][2] == 5254);
    CHECK(sc_f[17][0] == 5176);
    CHECK(sc_f[17][1] == 5214);
    CHECK(sc_f[17][2] == 7472);
    CHECK(sc_f[18][0] == 5176);
    CHECK(sc_f[18][1] == 5254);
    CHECK(sc_f[18][2] == 7472);
    CHECK(sc_f[19][0] == 5178);
    CHECK(sc_f[19][1] == 5254);
    CHECK(sc_f[19][2] == 7472);
    CHECK(sc_f[20][0] == 5214);
    CHECK(sc_f[20][1] == 5254);
    CHECK(sc_f[20][2] == 7472);
    CHECK(sc_f[21][0] == 5176);
    CHECK(sc_f[21][1] == 5178);
    CHECK(sc_f[21][2] == 5254);
    CHECK(sc_f[21][3] == 7472);
    CHECK(sc_f[22][0] == 5176);
    CHECK(sc_f[22][1] == 5214);
    CHECK(sc_f[22][2] == 5254);
    CHECK(sc_f[22][3] == 7472);

    t = m.tet_tuple_from_vids(2321, 2481, 7747, 7933);
    sc_t = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 15);
    CHECK(sc_t[0][0] == 2321);
    CHECK(sc_t[1][0] == 2481);
    CHECK(sc_t[2][0] == 7747);
    CHECK(sc_t[3][0] == 7933);
    CHECK(sc_t[4][0] == 2321);
    CHECK(sc_t[4][1] == 2481);
    CHECK(sc_t[5][0] == 2321);
    CHECK(sc_t[5][1] == 7747);
    CHECK(sc_t[6][0] == 2321);
    CHECK(sc_t[6][1] == 7933);
    CHECK(sc_t[7][0] == 2481);
    CHECK(sc_t[7][1] == 7747);
    CHECK(sc_t[8][0] == 2481);
    CHECK(sc_t[8][1] == 7933);
    CHECK(sc_t[9][0] == 7747);
    CHECK(sc_t[9][1] == 7933);
    CHECK(sc_t[10][0] == 2321);
    CHECK(sc_t[10][1] == 2481);
    CHECK(sc_t[10][2] == 7747);
    CHECK(sc_t[11][0] == 2321);
    CHECK(sc_t[11][1] == 2481);
    CHECK(sc_t[11][2] == 7933);
    CHECK(sc_t[12][0] == 2321);
    CHECK(sc_t[12][1] == 7747);
    CHECK(sc_t[12][2] == 7933);
    CHECK(sc_t[13][0] == 2481);
    CHECK(sc_t[13][1] == 7747);
    CHECK(sc_t[13][2] == 7933);
    CHECK(sc_t[14][0] == 2321);
    CHECK(sc_t[14][1] == 2481);
    CHECK(sc_t[14][2] == 7747);
    CHECK(sc_t[14][3] == 7933);

    t = m.tet_tuple_from_vids(2798, 3076, 7527, 7747);
    sc_t = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 15);
    CHECK(sc_t[0][0] == 2798);
    CHECK(sc_t[1][0] == 3076);
    CHECK(sc_t[2][0] == 7527);
    CHECK(sc_t[3][0] == 7747);
    CHECK(sc_t[4][0] == 2798);
    CHECK(sc_t[4][1] == 3076);
    CHECK(sc_t[5][0] == 2798);
    CHECK(sc_t[5][1] == 7527);
    CHECK(sc_t[6][0] == 2798);
    CHECK(sc_t[6][1] == 7747);
    CHECK(sc_t[7][0] == 3076);
    CHECK(sc_t[7][1] == 7527);
    CHECK(sc_t[8][0] == 3076);
    CHECK(sc_t[8][1] == 7747);
    CHECK(sc_t[9][0] == 7527);
    CHECK(sc_t[9][1] == 7747);
    CHECK(sc_t[10][0] == 2798);
    CHECK(sc_t[10][1] == 3076);
    CHECK(sc_t[10][2] == 7527);
    CHECK(sc_t[11][0] == 2798);
    CHECK(sc_t[11][1] == 3076);
    CHECK(sc_t[11][2] == 7747);
    CHECK(sc_t[12][0] == 2798);
    CHECK(sc_t[12][1] == 7527);
    CHECK(sc_t[12][2] == 7747);
    CHECK(sc_t[13][0] == 3076);
    CHECK(sc_t[13][1] == 7527);
    CHECK(sc_t[13][2] == 7747);
    CHECK(sc_t[14][0] == 2798);
    CHECK(sc_t[14][1] == 3076);
    CHECK(sc_t[14][2] == 7527);
    CHECK(sc_t[14][3] == 7747);

    t = m.tet_tuple_from_vids(4950, 4979, 5020, 5088);
    sc_t = get_sorted_sc(m, SimplicialComplex::closed_star(m, Simplex(PT, t)).get_simplex_vector());
    REQUIRE(sc_t.size() == 15);
    CHECK(sc_t[0][0] == 4950);
    CHECK(sc_t[1][0] == 4979);
    CHECK(sc_t[2][0] == 5020);
    CHECK(sc_t[3][0] == 5088);
    CHECK(sc_t[4][0] == 4950);
    CHECK(sc_t[4][1] == 4979);
    CHECK(sc_t[5][0] == 4950);
    CHECK(sc_t[5][1] == 5020);
    CHECK(sc_t[6][0] == 4950);
    CHECK(sc_t[6][1] == 5088);
    CHECK(sc_t[7][0] == 4979);
    CHECK(sc_t[7][1] == 5020);
    CHECK(sc_t[8][0] == 4979);
    CHECK(sc_t[8][1] == 5088);
    CHECK(sc_t[9][0] == 5020);
    CHECK(sc_t[9][1] == 5088);
    CHECK(sc_t[10][0] == 4950);
    CHECK(sc_t[10][1] == 4979);
    CHECK(sc_t[10][2] == 5020);
    CHECK(sc_t[11][0] == 4950);
    CHECK(sc_t[11][1] == 4979);
    CHECK(sc_t[11][2] == 5088);
    CHECK(sc_t[12][0] == 4950);
    CHECK(sc_t[12][1] == 5020);
    CHECK(sc_t[12][2] == 5088);
    CHECK(sc_t[13][0] == 4979);
    CHECK(sc_t[13][1] == 5020);
    CHECK(sc_t[13][2] == 5088);
    CHECK(sc_t[14][0] == 4950);
    CHECK(sc_t[14][1] == 4979);
    CHECK(sc_t[14][2] == 5020);
    CHECK(sc_t[14][3] == 5088);
}
